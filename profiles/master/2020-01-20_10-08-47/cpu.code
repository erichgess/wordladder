Total: 5.78s
ROUTINE ======================== main.(*Graph).EdgeCount in /Users/erichgess/go/src/erichgess/wordladder/graph.go
      10ms       10ms (flat, cum)  0.17% of Total
         .          .    307:
         .          .    308:// EdgeCount returns the number of connections between words in the graph
         .          .    309:func (g *Graph) EdgeCount() int {
         .          .    310:	e := 0
         .          .    311:	for i := range g.adjList {
      10ms       10ms    312:		e += len(g.adjList[i])
         .          .    313:	}
         .          .    314:
         .          .    315:	return e / 2
         .          .    316:}
         .          .    317:
ROUTINE ======================== main.(*Graph).buildAdjList in /Users/erichgess/go/src/erichgess/wordladder/graph.go
     390ms      1.76s (flat, cum) 30.45% of Total
         .          .    100:	return &g
         .          .    101:}
         .          .    102:
         .          .    103:func (g *Graph) buildAdjList(index *index) {
         .          .    104:	totalSz := 0
      10ms       10ms    105:	for i := 0; i < len(g.vertices); i++ {
      10ms       10ms    106:		cWord := g.vertices[i].word
         .      160ms    107:		sz := index.nearCount(cWord)
      10ms       10ms    108:		totalSz += sz
         .      130ms    109:		adj := make([]int, sz)
         .      570ms    110:		index.near(cWord, adj)
     280ms      280ms    111:		for _, j := range adj {
      70ms      220ms    112:			if distance(cWord, g.vertices[j].word) == 1 {
         .      180ms    113:				g.adjList[i] = append(g.adjList[i], j)
      10ms      190ms    114:				g.adjList[j] = append(g.adjList[j], i)
         .          .    115:			}
         .          .    116:		}
         .          .    117:	}
         .          .    118:	fmt.Printf("Avg sz:%f\n", float64(totalSz)/float64(len(g.vertices)))
         .          .    119:}
ROUTINE ======================== main.(*index).add in /Users/erichgess/go/src/erichgess/wordladder/index.go
     170ms      650ms (flat, cum) 11.25% of Total
         .          .     31:func (idx *index) add(id int, word []byte) {
         .          .     32:	// for each permutation of `word` created by deleting a single letter
         .          .     33:	// add `id` to the index associated with that permutation
         .          .     34:	tmp := idx.buf[:len(word)-1]
         .          .     35:	for i := 0; i < len(word); i++ {
         .       10ms     36:		skipOneCopy(tmp, word, i)
         .          .     37:
         .       10ms     38:		idx.hasher.Reset()
      10ms       10ms     39:		idx.hasher.Write(tmp)
      20ms       20ms     40:		hash := idx.hasher.Sum64() % idx.size
     140ms      600ms     41:		idx.index[hash] = append(idx.index[hash], id)
         .          .     42:	}
         .          .     43:}
         .          .     44:
         .          .     45:/*
         .          .     46:performance notes
ROUTINE ======================== main.(*index).near in /Users/erichgess/go/src/erichgess/wordladder/index.go
      90ms      570ms (flat, cum)  9.86% of Total
         .          .     95:  6.  If hash is complete, move to the next hash
         .          .     96:*/
         .          .     97:func (idx *index) near(word []byte, result []int) {
         .          .     98:	var hashBuffer [48]uint64
         .          .     99:	hashes := hashBuffer[0:(len(word) + 1)]
         .       10ms    100:	idx.hasher.Reset()
         .          .    101:	idx.hasher.Write(word)
         .          .    102:	hashes[0] = idx.hasher.Sum64() % idx.size
         .          .    103:	tmp := idx.buf[:len(word)-1]
         .          .    104:	for i := 0; i < len(word); i++ {
         .       20ms    105:		skipOneCopy(tmp, word, i)
         .          .    106:
         .       20ms    107:		idx.hasher.Reset()
         .       50ms    108:		idx.hasher.Write(tmp)
      90ms      100ms    109:		hashes[i+1] = idx.hasher.Sum64() % idx.size
         .          .    110:	}
         .          .    111:
         .          .    112:	pos := 0
         .          .    113:	for i := 0; i < len(hashes); i++ {
         .          .    114:		hash := hashes[i]
         .          .    115:		v := idx.index[hash]
         .          .    116:
         .      370ms    117:		pos = copy(result[pos:], v)
         .          .    118:	}
         .          .    119:}
         .          .    120:
         .          .    121:// skipOneCopy copies the src slice to the dst slice while skipping
         .          .    122:// the byte at index `skip`.  `dst` should have a length >= `len(src)-1`.
ROUTINE ======================== main.(*index).nearCount in /Users/erichgess/go/src/erichgess/wordladder/index.go
      60ms      160ms (flat, cum)  2.77% of Total
         .          .     59:func (idx *index) nearCount(word []byte) int {
         .          .     60:	var hashBuffer [48]uint64
         .          .     61:	hashes := hashBuffer[0:(len(word) + 1)]
         .          .     62:	idx.hasher.Reset()
         .          .     63:	idx.hasher.Write(word)
         .       10ms     64:	hashes[0] = idx.hasher.Sum64() % idx.size
         .          .     65:	tmp := idx.buf[:len(word)-1]
         .          .     66:	for i := 0; i < len(word); i++ {
         .       30ms     67:		skipOneCopy(tmp, word, i)
         .          .     68:
         .       10ms     69:		idx.hasher.Reset()
         .       20ms     70:		idx.hasher.Write(tmp)
      30ms       60ms     71:		hashes[i+1] = idx.hasher.Sum64() % idx.size
         .          .     72:	}
         .          .     73:
         .          .     74:	count := 0
         .          .     75:	for i := 0; i < len(hashes); i++ {
         .          .     76:		l := len(idx.index[hashes[i]])
      30ms       30ms     77:		count += l
         .          .     78:	}
         .          .     79:
         .          .     80:	return count
         .          .     81:}
         .          .     82:
ROUTINE ======================== main.LoadDictionary in /Users/erichgess/go/src/erichgess/wordladder/graph.go
      20ms      2.67s (flat, cum) 46.19% of Total
         .          .     50:	}
         .          .     51:
         .          .     52:	// read the dictionary and for each word at it as a vertex in the graph.
         .          .     53:	longestWord := 0
         .          .     54:	scanner := bufio.NewScanner(file)
         .       20ms     55:	for scanner.Scan() {
         .          .     56:		by := scanner.Bytes()
         .          .     57:		word := make([]byte, len(by))
         .          .     58:		copy(word, by)
      20ms       90ms     59:		g.vertices = append(g.vertices, Vertex{word})
         .          .     60:		if len(word) > longestWord {
         .          .     61:			longestWord = len(word)
         .          .     62:		}
         .          .     63:	}
         .          .     64:
         .          .     65:	if dump != "" {
         .          .     66:		g.dumpVertices(dump + "/vertices.txt")
         .          .     67:	}
         .          .     68:
         .       10ms     69:	g.adjList = make([][]int, len(g.vertices))
         .          .     70:	for i := range g.adjList {
         .       20ms     71:		g.adjList[i] = make([]int, 0)
         .          .     72:	}
         .          .     73:
         .          .     74:	stopBldIdxTmr := newTimer("buildIndex")
         .      120ms     75:	index := newIndex(numBuckets, longestWord)
         .          .     76:	for i, w := range g.vertices {
         .      650ms     77:		index.add(i, w.word)
         .          .     78:	}
         .          .     79:	stopBldIdxTmr()
         .          .     80:
         .          .     81:	if stats {
         .          .     82:		index.printStats()
         .          .     83:		indexDuplicates(index)
         .          .     84:	}
         .          .     85:
         .          .     86:	// for each word, find words which are only one letter different
         .          .     87:	// and create edges connecting them.
         .          .     88:	stopBldAdjTmr := newTimer("buildAdjList")
         .      1.76s     89:	g.buildAdjList(index)
         .          .     90:	stopBldAdjTmr()
         .          .     91:
         .          .     92:	if dump != "" {
         .          .     93:		g.dumpAdjList(dump + "/adj.txt")
         .          .     94:	}
ROUTINE ======================== main.distance in /Users/erichgess/go/src/erichgess/wordladder/graph.go
     150ms      150ms (flat, cum)  2.60% of Total
         .          .    282:	return g.adjList[v]
         .          .    283:}
         .          .    284:
         .          .    285:func distance(w1, w2 []byte) int {
         .          .    286:	dist := len(w1) - len(w2)
      10ms       10ms    287:	if dist < 0 {
         .          .    288:		dist = -dist
         .          .    289:	}
         .          .    290:	l := len(w1)
         .          .    291:	if l > len(w2) {
         .          .    292:		l = len(w2)
         .          .    293:	}
      20ms       20ms    294:	for i := 0; i < l; i++ {
      10ms       10ms    295:		if w1[i] != w2[i] {
     100ms      100ms    296:			dist++
         .          .    297:		}
         .          .    298:	}
         .          .    299:
      10ms       10ms    300:	return dist
         .          .    301:}
         .          .    302:
         .          .    303:// WordCount returns hte number of words in the graph
         .          .    304:func (g *Graph) WordCount() int {
         .          .    305:	return len(g.vertices)
ROUTINE ======================== main.main in /Users/erichgess/go/src/erichgess/wordladder/main.go
         0      2.69s (flat, cum) 46.54% of Total
         .          .     48:	if *dump != "" {
         .          .     49:		createPathIfNotExists(*dump)
         .          .     50:	}
         .          .     51:
         .          .     52:	fmt.Println("Loading Dictionary")
         .      2.67s     53:	g := LoadDictionary(*dict, *numBuckets, *perfStats, *dump)
         .       10ms     54:	fmt.Printf("Words: %d\tEdges: %d\n", g.WordCount(), g.EdgeCount())
         .          .     55:
         .          .     56:	if *dictStats {
         .          .     57:		dictionaryStats(*dict)
         .          .     58:	}
         .          .     59:
         .          .     60:	if *src != "" && *dest != "" {
         .          .     61:		fmt.Printf("Finding Path from %s to %s\n", *src, *dest)
         .          .     62:		v1 := g.Find(*src)
         .          .     63:		v2 := g.Find(*dest)
         .          .     64:
         .          .     65:		if v1 < 0 || v2 < 0 {
         .          .     66:			if v1 < 0 {
         .          .     67:				fmt.Printf("%s was not found\n", *src)
         .          .     68:			}
         .          .     69:			if v2 < 0 {
         .          .     70:				fmt.Printf("%s was not found\n", *dest)
         .          .     71:			}
         .          .     72:			return
         .          .     73:		}
         .          .     74:
         .          .     75:		fmt.Println("Using Paths")
         .          .     76:		paths := g.AllPaths(v1)
         .          .     77:		p := paths.To(*dest)
         .          .     78:		if len(p) == 0 {
         .          .     79:			fmt.Printf("There is no path from %s to %s\n", *src, *dest)
         .          .     80:		}
         .          .     81:		for _, v := range p {
         .          .     82:			fmt.Println(string(g.vertices[v].word))
         .          .     83:		}
         .          .     84:	} else if *printGraph {
         .          .     85:		g.PrintAdjList()
         .          .     86:	}
         .          .     87:
         .          .     88:	if *memprofile != "" {
         .          .     89:		runtime.GC()
         .          .     90:		memProfile, err := os.Create(*memprofile)
         .          .     91:		if err != nil {
         .          .     92:			log.Fatal("failed to create mem profile file", err)
         .          .     93:		}
         .          .     94:		defer memProfile.Close()
         .       10ms     95:		if err := pprof.WriteHeapProfile(memProfile); err != nil {
         .          .     96:			log.Fatal("failed to write heap profile", err)
         .          .     97:		}
         .          .     98:	}
         .          .     99:}
         .          .    100:
ROUTINE ======================== main.newIndex in /Users/erichgess/go/src/erichgess/wordladder/index.go
     110ms      120ms (flat, cum)  2.08% of Total
         .          .     13:	index  [][]int
         .          .     14:	buf    []byte // a shared buffer used for copying intermediate words
         .          .     15:	size   uint64
         .          .     16:}
         .          .     17:
      10ms       10ms     18:func newIndex(size int, bufSize int) *index {
         .       10ms     19:	idx := make([][]int, size)
         .          .     20:	for i := range idx {
     100ms      100ms     21:		idx[i] = make([]int, 0)
         .          .     22:	}
         .          .     23:	return &index{
         .          .     24:		hasher: murmur3.New64(),
         .          .     25:		buf:    make([]byte, 0, bufSize),
         .          .     26:		index:  idx,
ROUTINE ======================== main.skipOneCopy in /Users/erichgess/go/src/erichgess/wordladder/index.go
      50ms       60ms (flat, cum)  1.04% of Total
         .          .    120:
         .          .    121:// skipOneCopy copies the src slice to the dst slice while skipping
         .          .    122:// the byte at index `skip`.  `dst` should have a length >= `len(src)-1`.
         .          .    123:func skipOneCopy(dst []byte, src []byte, skip int) {
         .          .    124:	tmpA := dst[:skip]
      10ms       10ms    125:	tmpB := dst[skip:]
         .          .    126:	copy(tmpA, src[:skip])
      40ms       50ms    127:	copy(tmpB, src[skip+1:])
         .          .    128:}
         .          .    129:
         .          .    130:func (idx *index) printStats() {
         .          .    131:	fmt.Printf("\nIndex Stats:\n")
         .          .    132:	fmt.Printf("Buffer: %d\n", cap(idx.buf))
ROUTINE ======================== runtime.main in /usr/local/Cellar/go/1.13.3/libexec/src/runtime/proc.go
         0      2.69s (flat, cum) 46.54% of Total
         .          .    198:		// A program compiled with -buildmode=c-archive or c-shared
         .          .    199:		// has a main, but it is not executed.
         .          .    200:		return
         .          .    201:	}
         .          .    202:	fn := main_main // make an indirect call, as the linker doesn't know the address of the main package when laying down the runtime
         .      2.69s    203:	fn()
         .          .    204:	if raceenabled {
         .          .    205:		racefini()
         .          .    206:	}
         .          .    207:
         .          .    208:	// Make racy client program work: if panicking on
