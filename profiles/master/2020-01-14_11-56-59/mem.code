Total: 1.58GB
ROUTINE ======================== main.(*index).add in /Users/erichgess/go/src/erichgess/wordladder/index.go
  727.55MB   727.55MB (flat, cum) 44.94% of Total
         .          .     28:		skipOneCopy(tmp, word, i)
         .          .     29:
         .          .     30:		idx.hasher.Reset()
         .          .     31:		idx.hasher.Write(tmp)
         .          .     32:		hash := idx.hasher.Sum64()
  727.55MB   727.55MB     33:		idx.index[hash] = append(idx.index[hash], id)
         .          .     34:	}
         .          .     35:}
         .          .     36:
         .          .     37:func (idx *index) near(word []byte) []int {
         .          .     38:	idx.hasher.Reset()
ROUTINE ======================== main.(*index).near in /Users/erichgess/go/src/erichgess/wordladder/index.go
  472.23MB   472.23MB (flat, cum) 29.17% of Total
         .          .     38:	idx.hasher.Reset()
         .          .     39:	idx.hasher.Write(word)
         .          .     40:	hash := idx.hasher.Sum64()
         .          .     41:
         .          .     42:	l := len(idx.index[hash])
       5MB        5MB     43:	adjList := make([]int, l)
         .          .     44:	copy(adjList, idx.index[hash])
         .          .     45:
         .          .     46:	tmp := idx.buf[:len(word)-1]
         .          .     47:	for i := 0; i < len(word); i++ {
         .          .     48:		skipOneCopy(tmp, word, i)
         .          .     49:
         .          .     50:		idx.hasher.Reset()
         .          .     51:		idx.hasher.Write(tmp)
         .          .     52:		hash := idx.hasher.Sum64()
         .          .     53:		if v, ok := idx.index[hash]; ok {
         .          .     54:			for _, id := range v {
  467.23MB   467.23MB     55:				adjList = append(adjList, id)
         .          .     56:			}
         .          .     57:		}
         .          .     58:	}
         .          .     59:
         .          .     60:	return adjList
ROUTINE ======================== main.LoadDictionary in /Users/erichgess/go/src/erichgess/wordladder/graph.go
  419.12MB     1.58GB (flat, cum)   100% of Total
         .          .     51:	// read the dictionary and for each word at it as a vertex in the graph.
         .          .     52:	longestWord := 0
         .          .     53:	scanner := bufio.NewScanner(file)
         .          .     54:	for scanner.Scan() {
         .          .     55:		by := scanner.Bytes()
    7.50MB     7.50MB     56:		word := make([]byte, len(by))
         .          .     57:		copy(word, by)
  126.11MB   126.11MB     58:		g.vertices = append(g.vertices, Vertex{word})
         .          .     59:		if len(word) > longestWord {
         .          .     60:			longestWord = len(word)
         .          .     61:		}
         .          .     62:	}
         .          .     63:
         .          .     64:	if dump != "" {
         .          .     65:		g.dumpVertices(dump + "/vertices.txt")
         .          .     66:	}
         .          .     67:
   22.89MB    22.89MB     68:	g.adjList = make([][]int, len(g.vertices))
         .          .     69:	for i := range g.adjList {
         .          .     70:		g.adjList[i] = make([]int, 0)
         .          .     71:	}
         .          .     72:
         .          .     73:	stopBldIdxTmr := newTimer("buildIndex")
         .          .     74:	index := newIndex(longestWord)
         .          .     75:	for i, w := range g.vertices {
         .   727.55MB     76:		index.add(i, w.word)
         .          .     77:	}
         .          .     78:	stopBldIdxTmr()
         .          .     79:
         .          .     80:	if stats {
         .          .     81:		indexDuplicates(index)
         .          .     82:	}
         .          .     83:
         .          .     84:	// for each word, find words which are only one letter different
         .          .     85:	// and create edges connecting them.
         .          .     86:	stopBldAdjTmr := newTimer("buildAdjList")
         .          .     87:	for i := 0; i < len(g.vertices); i++ {
         .          .     88:		cWord := g.vertices[i].word
         .   472.23MB     89:		adj := index.near(cWord)
         .          .     90:		for _, j := range adj {
         .          .     91:			if distance(cWord, g.vertices[j].word) == 1 {
  139.06MB   139.06MB     92:				g.adjList[i] = append(g.adjList[i], j)
  123.56MB   123.56MB     93:				g.adjList[j] = append(g.adjList[j], i)
         .          .     94:			}
         .          .     95:		}
         .          .     96:	}
         .          .     97:	stopBldAdjTmr()
         .          .     98:
ROUTINE ======================== main.main in /Users/erichgess/go/src/erichgess/wordladder/main.go
         0     1.58GB (flat, cum)   100% of Total
         .          .     47:	if *dump != "" {
         .          .     48:		createPathIfNotExists(*dump)
         .          .     49:	}
         .          .     50:
         .          .     51:	fmt.Println("Loading Dictionary")
         .     1.58GB     52:	g := LoadDictionary(*dict, *perfStats, *dump)
         .          .     53:	fmt.Printf("Words: %d\tEdges: %d\n", g.WordCount(), g.EdgeCount())
         .          .     54:
         .          .     55:	if *dictStats {
         .          .     56:		dictionaryStats(*dict)
         .          .     57:	}
ROUTINE ======================== runtime.main in /usr/local/Cellar/go/1.13.3/libexec/src/runtime/proc.go
         0     1.58GB (flat, cum)   100% of Total
         .          .    198:		// A program compiled with -buildmode=c-archive or c-shared
         .          .    199:		// has a main, but it is not executed.
         .          .    200:		return
         .          .    201:	}
         .          .    202:	fn := main_main // make an indirect call, as the linker doesn't know the address of the main package when laying down the runtime
         .     1.58GB    203:	fn()
         .          .    204:	if raceenabled {
         .          .    205:		racefini()
         .          .    206:	}
         .          .    207:
         .          .    208:	// Make racy client program work: if panicking on
