Total: 5.53s
ROUTINE ======================== main.(*Graph).buildAdjList in /Users/erichgess/go/src/erichgess/wordladder/graph.go
     580ms      1.83s (flat, cum) 33.09% of Total
         .          .    101:
         .          .    102:func (g *Graph) buildAdjList(index *index) {
         .          .    103:	totalSz := 0
         .          .    104:	for i := 0; i < len(g.vertices); i++ {
         .          .    105:		cWord := g.vertices[i].word
         .      190ms    106:		sz := index.nearCount(cWord)
         .          .    107:		totalSz += sz
         .       90ms    108:		adj := make([]int, sz)
         .      590ms    109:		index.near(cWord, adj)
     540ms      540ms    110:		for _, j := range adj {
      30ms       90ms    111:			if distance(cWord, g.vertices[j].word) == 1 {
         .      140ms    112:				g.adjList[i] = append(g.adjList[i], j)
      10ms      190ms    113:				g.adjList[j] = append(g.adjList[j], i)
         .          .    114:			}
         .          .    115:		}
         .          .    116:	}
         .          .    117:	fmt.Printf("Avg sz:%f\n", float64(totalSz)/float64(len(g.vertices)))
         .          .    118:}
ROUTINE ======================== main.(*index).add in /Users/erichgess/go/src/erichgess/wordladder/index.go
      80ms      680ms (flat, cum) 12.30% of Total
         .          .     33:}
         .          .     34:
         .          .     35:func (idx *index) add(id int, word []byte) {
         .          .     36:	// for each permutation of `word` created by deleting a single letter
         .          .     37:	// add `id` to the index associated with that permutation
      10ms       10ms     38:	tmp := idx.buf[:len(word)-1]
         .          .     39:	for i := 0; i < len(word); i++ {
         .       10ms     40:		skipOneCopy(tmp, word, i)
         .          .     41:
         .          .     42:		idx.hasher.Reset()
      10ms       30ms     43:		idx.hasher.Write(tmp)
      10ms       20ms     44:		hash := idx.hasher.Sum64() % idx.size
      50ms      610ms     45:		idx.index[hash] = append(idx.index[hash], id)
         .          .     46:	}
         .          .     47:}
         .          .     48:
         .          .     49:/*
         .          .     50:performance notes
ROUTINE ======================== main.(*index).near in /Users/erichgess/go/src/erichgess/wordladder/index.go
      40ms      590ms (flat, cum) 10.67% of Total
         .          .     99:  6.  If hash is complete, move to the next hash
         .          .    100:*/
         .          .    101:func (idx *index) near(word []byte, result []int) {
         .          .    102:	var hashBuffer [48]uint64
         .          .    103:	hashes := hashBuffer[0:(len(word) + 1)]
         .       10ms    104:	idx.hasher.Reset()
         .       10ms    105:	idx.hasher.Write(word)
         .       10ms    106:	hashes[0] = idx.hasher.Sum64() % idx.size
         .          .    107:	tmp := idx.buf[:len(word)-1]
         .          .    108:	for i := 0; i < len(word); i++ {
         .       20ms    109:		skipOneCopy(tmp, word, i)
         .          .    110:
         .          .    111:		idx.hasher.Reset()
         .       20ms    112:		idx.hasher.Write(tmp)
      10ms       30ms    113:		hashes[i+1] = idx.hasher.Sum64() % idx.size
         .          .    114:	}
         .          .    115:
         .          .    116:	pos := 0
         .          .    117:	for i := 0; i < len(hashes); i++ {
         .          .    118:		hash := hashes[i]
         .          .    119:		v := idx.index[hash]
         .          .    120:
      30ms      490ms    121:		pos = copy(result[pos:], v)
         .          .    122:	}
         .          .    123:}
         .          .    124:
         .          .    125:// skipOneCopy copies the src slice to the dst slice while skipping
         .          .    126:// the byte at index `skip`.  `dst` should have a length >= `len(src)-1`.
ROUTINE ======================== main.(*index).nearCount in /Users/erichgess/go/src/erichgess/wordladder/index.go
      90ms      190ms (flat, cum)  3.44% of Total
         .          .     59:	(also duplicate work, the same buckets will be recomputed many many times)
         .          .     60:  - Think about how this is pulling in cache lines and moving data around registers and the stack
         .          .     61:*/
         .          .     62:
         .          .     63:func (idx *index) nearCount(word []byte) int {
      10ms       20ms     64:	var hashBuffer [48]uint64
         .          .     65:	hashes := hashBuffer[0:(len(word) + 1)]
         .          .     66:	idx.hasher.Reset()
      10ms       10ms     67:	idx.hasher.Write(word)
         .       20ms     68:	hashes[0] = idx.hasher.Sum64() % idx.size
         .          .     69:	tmp := idx.buf[:len(word)-1]
      10ms       10ms     70:	for i := 0; i < len(word); i++ {
         .       20ms     71:		skipOneCopy(tmp, word, i)
         .          .     72:
         .       10ms     73:		idx.hasher.Reset()
         .       20ms     74:		idx.hasher.Write(tmp)
      10ms       30ms     75:		hashes[i+1] = idx.hasher.Sum64() % idx.size
         .          .     76:	}
         .          .     77:
         .          .     78:	count := 0
         .          .     79:	for i := 0; i < len(hashes); i++ {
         .          .     80:		l := len(idx.index[hashes[i]])
      50ms       50ms     81:		count += l
         .          .     82:	}
         .          .     83:
         .          .     84:	return count
         .          .     85:}
         .          .     86:
ROUTINE ======================== main.LoadDictionary in /Users/erichgess/go/src/erichgess/wordladder/graph.go
      20ms      2.72s (flat, cum) 49.19% of Total
         .          .     50:	}
         .          .     51:
         .          .     52:	// read the dictionary and for each word at it as a vertex in the graph.
         .          .     53:	longestWord := 0
         .          .     54:	scanner := bufio.NewScanner(file)
         .       30ms     55:	for scanner.Scan() {
         .          .     56:		by := scanner.Bytes()
         .          .     57:		word := make([]byte, len(by))
         .          .     58:		copy(word, by)
      10ms       70ms     59:		g.vertices = append(g.vertices, Vertex{word})
         .          .     60:		if len(word) > longestWord {
         .          .     61:			longestWord = len(word)
         .          .     62:		}
         .          .     63:	}
         .          .     64:
         .          .     65:	if dump != "" {
         .          .     66:		g.dumpVertices(dump + "/vertices.txt")
         .          .     67:	}
         .          .     68:
         .          .     69:	g.adjList = make([][]int, len(g.vertices))
         .          .     70:	for i := range g.adjList {
      10ms       10ms     71:		g.adjList[i] = make([]int, 0)
         .          .     72:	}
         .          .     73:
         .          .     74:	stopBldIdxTmr := newTimer("buildIndex")
         .      100ms     75:	index := newIndex(numBuckets, longestWord)
         .          .     76:	for i, w := range g.vertices {
         .      680ms     77:		index.add(i, w.word)
         .          .     78:	}
         .          .     79:	stopBldIdxTmr()
         .          .     80:
         .          .     81:	if indexStats {
         .          .     82:		index.printStats()
         .          .     83:	}
         .          .     84:
         .          .     85:	// for each word, find words which are only one letter different
         .          .     86:	// and create edges connecting them.
         .          .     87:	stopBldAdjTmr := newTimer("buildAdjList")
         .      1.83s     88:	g.buildAdjList(index)
         .          .     89:	stopBldAdjTmr()
         .          .     90:
         .          .     91:	if dump != "" {
         .          .     92:		g.dumpAdjList(dump + "/adj.txt")
         .          .     93:	}
ROUTINE ======================== main.distance in /Users/erichgess/go/src/erichgess/wordladder/graph.go
      60ms       60ms (flat, cum)  1.08% of Total
         .          .    288:	}
         .          .    289:	l := len(w1)
         .          .    290:	if l > len(w2) {
         .          .    291:		l = len(w2)
         .          .    292:	}
      10ms       10ms    293:	for i := 0; i < l; i++ {
      10ms       10ms    294:		if w1[i] != w2[i] {
      40ms       40ms    295:			dist++
         .          .    296:		}
         .          .    297:	}
         .          .    298:
         .          .    299:	return dist
         .          .    300:}
ROUTINE ======================== main.main in /Users/erichgess/go/src/erichgess/wordladder/main.go
         0      2.75s (flat, cum) 49.73% of Total
         .          .     50:	if *dump != "" {
         .          .     51:		createPathIfNotExists(*dump)
         .          .     52:	}
         .          .     53:
         .          .     54:	fmt.Println("Loading Dictionary")
         .      2.72s     55:	g := LoadDictionary(*dict, *numBuckets, *indexStats, *perfStats, *dump)
         .          .     56:	fmt.Printf("Words: %d\tEdges: %d\n", g.WordCount(), g.EdgeCount())
         .          .     57:
         .          .     58:	if *dictStats {
         .          .     59:		dictionaryStats(*dict)
         .          .     60:	}
         .          .     61:
         .          .     62:	if *src != "" && *dest != "" {
         .          .     63:		fmt.Printf("Finding Path from %s to %s\n", *src, *dest)
         .          .     64:		v1 := g.Find(*src)
         .          .     65:		v2 := g.Find(*dest)
         .          .     66:
         .          .     67:		if v1 < 0 || v2 < 0 {
         .          .     68:			if v1 < 0 {
         .          .     69:				fmt.Printf("%s was not found\n", *src)
         .          .     70:			}
         .          .     71:			if v2 < 0 {
         .          .     72:				fmt.Printf("%s was not found\n", *dest)
         .          .     73:			}
         .          .     74:			return
         .          .     75:		}
         .          .     76:
         .          .     77:		fmt.Println("Using Paths")
         .          .     78:		paths := g.AllPaths(v1)
         .          .     79:		p := paths.To(*dest)
         .          .     80:		if len(p) == 0 {
         .          .     81:			fmt.Printf("There is no path from %s to %s\n", *src, *dest)
         .          .     82:		}
         .          .     83:		for _, v := range p {
         .          .     84:			fmt.Println(string(g.vertices[v].word))
         .          .     85:		}
         .          .     86:	} else if *printGraph {
         .          .     87:		g.PrintAdjList()
         .          .     88:	}
         .          .     89:
         .          .     90:	if *csv {
         .          .     91:		PrintStatsCSV(true)
         .          .     92:	} else {
         .          .     93:		PrintStats()
         .          .     94:	}
         .          .     95:
         .          .     96:	if *memprofile != "" {
         .       20ms     97:		runtime.GC()
         .          .     98:		memProfile, err := os.Create(*memprofile)
         .          .     99:		if err != nil {
         .          .    100:			log.Fatal("failed to create mem profile file", err)
         .          .    101:		}
         .          .    102:		defer memProfile.Close()
         .       10ms    103:		if err := pprof.WriteHeapProfile(memProfile); err != nil {
         .          .    104:			log.Fatal("failed to write heap profile", err)
         .          .    105:		}
         .          .    106:	}
         .          .    107:}
         .          .    108:
ROUTINE ======================== main.newIndex in /Users/erichgess/go/src/erichgess/wordladder/index.go
      80ms      100ms (flat, cum)  1.81% of Total
         .          .     18:	buf    []byte // a shared buffer used for copying intermediate words
         .          .     19:	size   uint64
         .          .     20:}
         .          .     21:
         .          .     22:func newIndex(size int, bufSize int) *index {
         .       10ms     23:	idx := make([][]int, size)
         .          .     24:	for i := range idx {
      80ms       80ms     25:		idx[i] = make([]int, 0)
         .          .     26:	}
         .          .     27:	return &index{
         .       10ms     28:		hasher: murmur3.New64(),
         .          .     29:		buf:    make([]byte, 0, bufSize),
         .          .     30:		index:  idx,
         .          .     31:		size:   uint64(size),
         .          .     32:	}
         .          .     33:}
ROUTINE ======================== main.skipOneCopy in /Users/erichgess/go/src/erichgess/wordladder/index.go
      20ms       50ms (flat, cum)   0.9% of Total
         .          .    124:
         .          .    125:// skipOneCopy copies the src slice to the dst slice while skipping
         .          .    126:// the byte at index `skip`.  `dst` should have a length >= `len(src)-1`.
         .          .    127:func skipOneCopy(dst []byte, src []byte, skip int) {
         .          .    128:	tmpA := dst[:skip]
      10ms       10ms    129:	tmpB := dst[skip:]
         .       10ms    130:	copy(tmpA, src[:skip])
      10ms       30ms    131:	copy(tmpB, src[skip+1:])
         .          .    132:}
         .          .    133:
         .          .    134:func (idx *index) printStats() {
         .          .    135:	AddStatInt("Index Buffer", cap(idx.buf))
         .          .    136:	AddStatInt("Index Buckets", len(idx.index))
ROUTINE ======================== runtime.main in /usr/local/Cellar/go/1.13.3/libexec/src/runtime/proc.go
         0      2.75s (flat, cum) 49.73% of Total
         .          .    198:		// A program compiled with -buildmode=c-archive or c-shared
         .          .    199:		// has a main, but it is not executed.
         .          .    200:		return
         .          .    201:	}
         .          .    202:	fn := main_main // make an indirect call, as the linker doesn't know the address of the main package when laying down the runtime
         .      2.75s    203:	fn()
         .          .    204:	if raceenabled {
         .          .    205:		racefini()
         .          .    206:	}
         .          .    207:
         .          .    208:	// Make racy client program work: if panicking on
