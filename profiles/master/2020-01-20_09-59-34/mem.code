Total: 812.91MB
ROUTINE ======================== main.(*Graph).buildAdjList in /Users/erichgess/go/src/erichgess/wordladder/graph.go
  362.14MB   362.14MB (flat, cum) 44.55% of Total
         .          .    104:	totalSz := 0
         .          .    105:	for i := 0; i < len(g.vertices); i++ {
         .          .    106:		cWord := g.vertices[i].word
         .          .    107:		sz := index.nearCount(cWord)
         .          .    108:		totalSz += sz
  233.61MB   233.61MB    109:		adj := make([]int, sz)
         .          .    110:		index.near(cWord, adj)
         .          .    111:		for _, j := range adj {
         .          .    112:			if distance(cWord, g.vertices[j].word) == 1 {
   68.51MB    68.51MB    113:				g.adjList[i] = append(g.adjList[i], j)
   60.02MB    60.02MB    114:				g.adjList[j] = append(g.adjList[j], i)
         .          .    115:			}
         .          .    116:		}
         .          .    117:	}
         .          .    118:	fmt.Printf("Avg sz:%f\n", float64(totalSz)/float64(len(g.vertices)))
         .          .    119:}
ROUTINE ======================== main.(*index).add in /Users/erichgess/go/src/erichgess/wordladder/index.go
  105.50MB   105.50MB (flat, cum) 12.98% of Total
         .          .     36:		skipOneCopy(tmp, word, i)
         .          .     37:
         .          .     38:		idx.hasher.Reset()
         .          .     39:		idx.hasher.Write(tmp)
         .          .     40:		hash := idx.hasher.Sum64() % idx.size
  105.50MB   105.50MB     41:		idx.index[hash] = append(idx.index[hash], id)
         .          .     42:	}
         .          .     43:}
         .          .     44:
         .          .     45:/*
         .          .     46:performance notes
ROUTINE ======================== main.LoadDictionary in /Users/erichgess/go/src/erichgess/wordladder/graph.go
  153.27MB   812.91MB (flat, cum)   100% of Total
         .          .     52:	// read the dictionary and for each word at it as a vertex in the graph.
         .          .     53:	longestWord := 0
         .          .     54:	scanner := bufio.NewScanner(file)
         .          .     55:	for scanner.Scan() {
         .          .     56:		by := scanner.Bytes()
       5MB        5MB     57:		word := make([]byte, len(by))
         .          .     58:		copy(word, by)
  125.38MB   125.38MB     59:		g.vertices = append(g.vertices, Vertex{word})
         .          .     60:		if len(word) > longestWord {
         .          .     61:			longestWord = len(word)
         .          .     62:		}
         .          .     63:	}
         .          .     64:
         .          .     65:	if dump != "" {
         .          .     66:		g.dumpVertices(dump + "/vertices.txt")
         .          .     67:	}
         .          .     68:
   22.89MB    22.89MB     69:	g.adjList = make([][]int, len(g.vertices))
         .          .     70:	for i := range g.adjList {
         .          .     71:		g.adjList[i] = make([]int, 0)
         .          .     72:	}
         .          .     73:
         .          .     74:	stopBldIdxTmr := newTimer("buildIndex")
         .      192MB     75:	index := newIndex(numBuckets, longestWord)
         .          .     76:	for i, w := range g.vertices {
         .   105.50MB     77:		index.add(i, w.word)
         .          .     78:	}
         .          .     79:	stopBldIdxTmr()
         .          .     80:
         .          .     81:	if stats {
         .          .     82:		index.printStats()
         .          .     83:		indexDuplicates(index)
         .          .     84:	}
         .          .     85:
         .          .     86:	// for each word, find words which are only one letter different
         .          .     87:	// and create edges connecting them.
         .          .     88:	stopBldAdjTmr := newTimer("buildAdjList")
         .   362.14MB     89:	g.buildAdjList(index)
         .          .     90:	stopBldAdjTmr()
         .          .     91:
         .          .     92:	if dump != "" {
         .          .     93:		g.dumpAdjList(dump + "/adj.txt")
         .          .     94:	}
ROUTINE ======================== main.main in /Users/erichgess/go/src/erichgess/wordladder/main.go
         0   812.91MB (flat, cum)   100% of Total
         .          .     48:	if *dump != "" {
         .          .     49:		createPathIfNotExists(*dump)
         .          .     50:	}
         .          .     51:
         .          .     52:	fmt.Println("Loading Dictionary")
         .   812.91MB     53:	g := LoadDictionary(*dict, *numBuckets, *perfStats, *dump)
         .          .     54:	fmt.Printf("Words: %d\tEdges: %d\n", g.WordCount(), g.EdgeCount())
         .          .     55:
         .          .     56:	if *dictStats {
         .          .     57:		dictionaryStats(*dict)
         .          .     58:	}
ROUTINE ======================== main.newIndex in /Users/erichgess/go/src/erichgess/wordladder/index.go
     192MB      192MB (flat, cum) 23.62% of Total
         .          .     14:	buf    []byte // a shared buffer used for copying intermediate words
         .          .     15:	size   uint64
         .          .     16:}
         .          .     17:
         .          .     18:func newIndex(size int, bufSize int) *index {
     192MB      192MB     19:	idx := make([][]int, size)
         .          .     20:	for i := range idx {
         .          .     21:		idx[i] = make([]int, 0)
         .          .     22:	}
         .          .     23:	return &index{
         .          .     24:		hasher: murmur3.New64(),
ROUTINE ======================== runtime.main in /usr/local/Cellar/go/1.13.3/libexec/src/runtime/proc.go
         0   812.91MB (flat, cum)   100% of Total
         .          .    198:		// A program compiled with -buildmode=c-archive or c-shared
         .          .    199:		// has a main, but it is not executed.
         .          .    200:		return
         .          .    201:	}
         .          .    202:	fn := main_main // make an indirect call, as the linker doesn't know the address of the main package when laying down the runtime
         .   812.91MB    203:	fn()
         .          .    204:	if raceenabled {
         .          .    205:		racefini()
         .          .    206:	}
         .          .    207:
         .          .    208:	// Make racy client program work: if panicking on
