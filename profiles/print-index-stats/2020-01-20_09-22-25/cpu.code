Total: 5.45s
ROUTINE ======================== main.(*Graph).buildAdjList in /Users/erichgess/go/src/erichgess/wordladder/graph.go
     590ms      1.90s (flat, cum) 34.86% of Total
         .          .    101:
         .          .    102:func (g *Graph) buildAdjList(index *index) {
         .          .    103:	totalSz := 0
         .          .    104:	for i := 0; i < len(g.vertices); i++ {
         .          .    105:		cWord := g.vertices[i].word
         .      160ms    106:		sz := index.nearCount(cWord)
         .          .    107:		totalSz += sz
         .      170ms    108:		adj := make([]int, sz)
         .      600ms    109:		index.near(cWord, adj)
     440ms      440ms    110:		for _, j := range adj {
     130ms      170ms    111:			if distance(cWord, g.vertices[j].word) == 1 {
      10ms      170ms    112:				g.adjList[i] = append(g.adjList[i], j)
      10ms      190ms    113:				g.adjList[j] = append(g.adjList[j], i)
         .          .    114:			}
         .          .    115:		}
         .          .    116:	}
         .          .    117:	fmt.Printf("Avg sz:%f\n", float64(totalSz)/float64(len(g.vertices)))
         .          .    118:}
ROUTINE ======================== main.(*index).add in /Users/erichgess/go/src/erichgess/wordladder/index.go
      10ms      310ms (flat, cum)  5.69% of Total
         .          .     36:		skipOneCopy(tmp, word, i)
         .          .     37:
         .          .     38:		idx.hasher.Reset()
         .          .     39:		idx.hasher.Write(tmp)
         .          .     40:		hash := idx.hasher.Sum64() % idx.size
      10ms      310ms     41:		idx.index[hash] = append(idx.index[hash], id)
         .          .     42:	}
         .          .     43:}
         .          .     44:
         .          .     45:/*
         .          .     46:performance notes
ROUTINE ======================== main.(*index).near in /Users/erichgess/go/src/erichgess/wordladder/index.go
      50ms      600ms (flat, cum) 11.01% of Total
         .          .    100:	idx.hasher.Reset()
         .          .    101:	idx.hasher.Write(word)
         .          .    102:	hashes[0] = idx.hasher.Sum64() % idx.size
         .          .    103:	tmp := idx.buf[:len(word)-1]
         .          .    104:	for i := 0; i < len(word); i++ {
         .       20ms    105:		skipOneCopy(tmp, word, i)
         .          .    106:
         .       10ms    107:		idx.hasher.Reset()
         .       10ms    108:		idx.hasher.Write(tmp)
      50ms       60ms    109:		hashes[i+1] = idx.hasher.Sum64() % idx.size
         .          .    110:	}
         .          .    111:
         .          .    112:	pos := 0
         .          .    113:	for i := 0; i < len(hashes); i++ {
         .          .    114:		hash := hashes[i]
         .          .    115:		v := idx.index[hash]
         .          .    116:
         .      500ms    117:		pos = copy(result[pos:], v)
         .          .    118:	}
         .          .    119:}
         .          .    120:
         .          .    121:// skipOneCopy copies the src slice to the dst slice while skipping
         .          .    122:// the byte at index `skip`.  `dst` should have a length >= `len(src)-1`.
ROUTINE ======================== main.(*index).nearCount in /Users/erichgess/go/src/erichgess/wordladder/index.go
      30ms      160ms (flat, cum)  2.94% of Total
         .          .     58:
         .          .     59:func (idx *index) nearCount(word []byte) int {
         .          .     60:	var hashBuffer [48]uint64
         .          .     61:	hashes := hashBuffer[0:(len(word) + 1)]
         .          .     62:	idx.hasher.Reset()
         .       10ms     63:	idx.hasher.Write(word)
         .          .     64:	hashes[0] = idx.hasher.Sum64() % idx.size
         .          .     65:	tmp := idx.buf[:len(word)-1]
         .          .     66:	for i := 0; i < len(word); i++ {
         .       20ms     67:		skipOneCopy(tmp, word, i)
         .          .     68:
         .       40ms     69:		idx.hasher.Reset()
         .       20ms     70:		idx.hasher.Write(tmp)
      10ms       50ms     71:		hashes[i+1] = idx.hasher.Sum64() % idx.size
         .          .     72:	}
         .          .     73:
         .          .     74:	count := 0
         .          .     75:	for i := 0; i < len(hashes); i++ {
         .          .     76:		l := len(idx.index[hashes[i]])
      20ms       20ms     77:		count += l
         .          .     78:	}
         .          .     79:
         .          .     80:	return count
         .          .     81:}
         .          .     82:
ROUTINE ======================== main.LoadDictionary in /Users/erichgess/go/src/erichgess/wordladder/graph.go
      10ms      2.50s (flat, cum) 45.87% of Total
         .          .     49:	}
         .          .     50:
         .          .     51:	// read the dictionary and for each word at it as a vertex in the graph.
         .          .     52:	longestWord := 0
         .          .     53:	scanner := bufio.NewScanner(file)
         .       30ms     54:	for scanner.Scan() {
         .          .     55:		by := scanner.Bytes()
         .          .     56:		word := make([]byte, len(by))
         .          .     57:		copy(word, by)
         .      100ms     58:		g.vertices = append(g.vertices, Vertex{word})
         .          .     59:		if len(word) > longestWord {
         .          .     60:			longestWord = len(word)
         .          .     61:		}
         .          .     62:	}
         .          .     63:
         .          .     64:	if dump != "" {
         .          .     65:		g.dumpVertices(dump + "/vertices.txt")
         .          .     66:	}
         .          .     67:
         .       10ms     68:	g.adjList = make([][]int, len(g.vertices))
         .          .     69:	for i := range g.adjList {
      10ms       10ms     70:		g.adjList[i] = make([]int, 0)
         .          .     71:	}
         .          .     72:
         .          .     73:	stopBldIdxTmr := newTimer("buildIndex")
         .      140ms     74:	index := newIndex(8*1024*1024, longestWord)
         .          .     75:	for i, w := range g.vertices {
         .      310ms     76:		index.add(i, w.word)
         .          .     77:	}
         .          .     78:	stopBldIdxTmr()
         .          .     79:
         .          .     80:	if stats {
         .          .     81:		index.printStats()
         .          .     82:		indexDuplicates(index)
         .          .     83:	}
         .          .     84:
         .          .     85:	// for each word, find words which are only one letter different
         .          .     86:	// and create edges connecting them.
         .          .     87:	stopBldAdjTmr := newTimer("buildAdjList")
         .      1.90s     88:	g.buildAdjList(index)
         .          .     89:	stopBldAdjTmr()
         .          .     90:
         .          .     91:	if dump != "" {
         .          .     92:		g.dumpAdjList(dump + "/adj.txt")
         .          .     93:	}
ROUTINE ======================== main.distance in /Users/erichgess/go/src/erichgess/wordladder/graph.go
      40ms       40ms (flat, cum)  0.73% of Total
         .          .    289:	l := len(w1)
         .          .    290:	if l > len(w2) {
         .          .    291:		l = len(w2)
         .          .    292:	}
         .          .    293:	for i := 0; i < l; i++ {
      10ms       10ms    294:		if w1[i] != w2[i] {
      30ms       30ms    295:			dist++
         .          .    296:		}
         .          .    297:	}
         .          .    298:
         .          .    299:	return dist
         .          .    300:}
ROUTINE ======================== main.main in /Users/erichgess/go/src/erichgess/wordladder/main.go
         0      2.50s (flat, cum) 45.87% of Total
         .          .     47:	if *dump != "" {
         .          .     48:		createPathIfNotExists(*dump)
         .          .     49:	}
         .          .     50:
         .          .     51:	fmt.Println("Loading Dictionary")
         .      2.50s     52:	g := LoadDictionary(*dict, *perfStats, *dump)
         .          .     53:	fmt.Printf("Words: %d\tEdges: %d\n", g.WordCount(), g.EdgeCount())
         .          .     54:
         .          .     55:	if *dictStats {
         .          .     56:		dictionaryStats(*dict)
         .          .     57:	}
ROUTINE ======================== main.newIndex in /Users/erichgess/go/src/erichgess/wordladder/index.go
      60ms      140ms (flat, cum)  2.57% of Total
         .          .     14:	buf    []byte // a shared buffer used for copying intermediate words
         .          .     15:	size   uint64
         .          .     16:}
         .          .     17:
         .          .     18:func newIndex(size int, bufSize int) *index {
         .       20ms     19:	idx := make([][]int, size)
      10ms       10ms     20:	for i := range idx {
      50ms      110ms     21:		idx[i] = make([]int, 0)
         .          .     22:	}
         .          .     23:	return &index{
         .          .     24:		hasher: murmur3.New64(),
         .          .     25:		buf:    make([]byte, 0, bufSize),
         .          .     26:		index:  idx,
ROUTINE ======================== main.skipOneCopy in /Users/erichgess/go/src/erichgess/wordladder/index.go
      20ms       40ms (flat, cum)  0.73% of Total
         .          .    119:}
         .          .    120:
         .          .    121:// skipOneCopy copies the src slice to the dst slice while skipping
         .          .    122:// the byte at index `skip`.  `dst` should have a length >= `len(src)-1`.
         .          .    123:func skipOneCopy(dst []byte, src []byte, skip int) {
      10ms       10ms    124:	tmpA := dst[:skip]
         .          .    125:	tmpB := dst[skip:]
         .          .    126:	copy(tmpA, src[:skip])
      10ms       30ms    127:	copy(tmpB, src[skip+1:])
         .          .    128:}
         .          .    129:
         .          .    130:func (idx *index) printStats() {
         .          .    131:	fmt.Printf("\nIndex Stats:\n")
         .          .    132:	fmt.Printf("Buffer: %d\n", len(idx.buf))
ROUTINE ======================== runtime.main in /usr/local/Cellar/go/1.13.3/libexec/src/runtime/proc.go
         0      2.50s (flat, cum) 45.87% of Total
         .          .    198:		// A program compiled with -buildmode=c-archive or c-shared
         .          .    199:		// has a main, but it is not executed.
         .          .    200:		return
         .          .    201:	}
         .          .    202:	fn := main_main // make an indirect call, as the linker doesn't know the address of the main package when laying down the runtime
         .      2.50s    203:	fn()
         .          .    204:	if raceenabled {
         .          .    205:		racefini()
         .          .    206:	}
         .          .    207:
         .          .    208:	// Make racy client program work: if panicking on
