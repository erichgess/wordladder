Total: 6.61s
ROUTINE ======================== main.(*Graph).buildAdjList in /Users/erichgess/go/src/erichgess/wordladder/graph.go
     740ms      2.57s (flat, cum) 38.88% of Total
         .          .    100:
         .          .    101:func (g *Graph) buildAdjList(index *index) {
         .          .    102:	totalSz := 0
         .          .    103:	for i := 0; i < len(g.vertices); i++ {
         .          .    104:		cWord := g.vertices[i].word
         .      350ms    105:		sz := index.nearCount(cWord)
         .          .    106:		totalSz += sz
         .       80ms    107:		adj := make([]int, sz)
         .      790ms    108:		index.near(cWord, adj)
     630ms      630ms    109:		for _, j := range adj {
      80ms      270ms    110:			if distance(cWord, g.vertices[j].word) == 1 {
      10ms      190ms    111:				g.adjList[i] = append(g.adjList[i], j)
      20ms      260ms    112:				g.adjList[j] = append(g.adjList[j], i)
         .          .    113:			}
         .          .    114:		}
         .          .    115:	}
         .          .    116:	fmt.Printf("Avg sz:%f\n", float64(totalSz)/float64(len(g.vertices)))
         .          .    117:}
ROUTINE ======================== main.(*index).add in /Users/erichgess/go/src/erichgess/wordladder/index.go
      20ms      460ms (flat, cum)  6.96% of Total
         .          .     32:	tmp := idx.buf[:len(word)-1]
         .          .     33:	for i := 0; i < len(word); i++ {
         .          .     34:		skipOneCopy(tmp, word, i)
         .          .     35:
         .          .     36:		idx.hasher.Reset()
         .       10ms     37:		idx.hasher.Write(tmp)
         .          .     38:		hash := idx.hasher.Sum64() % idx.size
      20ms      450ms     39:		idx.index[hash] = append(idx.index[hash], id)
         .          .     40:	}
         .          .     41:}
         .          .     42:
         .          .     43:func (idx *index) nearCount(word []byte) int {
         .          .     44:	count := 0
ROUTINE ======================== main.(*index).near in /Users/erichgess/go/src/erichgess/wordladder/index.go
      40ms      790ms (flat, cum) 11.95% of Total
         .          .     60:	return count
         .          .     61:}
         .          .     62:
         .          .     63:func (idx *index) near(word []byte, result []int) {
         .          .     64:	idx.hasher.Reset()
         .       10ms     65:	idx.hasher.Write(word)
         .          .     66:	hash := idx.hasher.Sum64() % idx.size
      10ms      150ms     67:	pos := copy(result, idx.index[hash])
         .          .     68:
         .          .     69:	tmp := idx.buf[:len(word)-1]
         .          .     70:	for i := 0; i < len(word); i++ {
         .       20ms     71:		skipOneCopy(tmp, word, i)
         .          .     72:
         .       10ms     73:		idx.hasher.Reset()
         .       30ms     74:		idx.hasher.Write(tmp)
         .       10ms     75:		hash := idx.hasher.Sum64() % idx.size
      20ms       20ms     76:		v := idx.index[hash]
      10ms      540ms     77:		pos = copy(result[pos:], v)
         .          .     78:	}
         .          .     79:
         .          .     80:}
         .          .     81:
         .          .     82:// skipOneCopy copies the src slice to the dst slice while skipping
ROUTINE ======================== main.(*index).nearCount in /Users/erichgess/go/src/erichgess/wordladder/index.go
     270ms      350ms (flat, cum)  5.30% of Total
         .          .     42:
         .          .     43:func (idx *index) nearCount(word []byte) int {
         .          .     44:	count := 0
         .          .     45:	idx.hasher.Reset()
         .          .     46:	idx.hasher.Write(word)
         .       20ms     47:	hash := idx.hasher.Sum64() % idx.size
         .          .     48:	count += len(idx.index[hash])
         .          .     49:
      30ms       30ms     50:	tmp := idx.buf[:len(word)-1]
         .          .     51:	for i := 0; i < len(word); i++ {
         .       10ms     52:		skipOneCopy(tmp, word, i)
         .          .     53:
         .          .     54:		idx.hasher.Reset()
      10ms       10ms     55:		idx.hasher.Write(tmp)
      10ms       60ms     56:		hash := idx.hasher.Sum64() % idx.size
     220ms      220ms     57:		count += len(idx.index[hash])
         .          .     58:	}
         .          .     59:
         .          .     60:	return count
         .          .     61:}
         .          .     62:
ROUTINE ======================== main.LoadDictionary in /Users/erichgess/go/src/erichgess/wordladder/graph.go
      30ms      3.32s (flat, cum) 50.23% of Total
         .          .     49:	}
         .          .     50:
         .          .     51:	// read the dictionary and for each word at it as a vertex in the graph.
         .          .     52:	longestWord := 0
         .          .     53:	scanner := bufio.NewScanner(file)
         .       30ms     54:	for scanner.Scan() {
         .          .     55:		by := scanner.Bytes()
         .          .     56:		word := make([]byte, len(by))
         .          .     57:		copy(word, by)
      30ms      110ms     58:		g.vertices = append(g.vertices, Vertex{word})
         .          .     59:		if len(word) > longestWord {
         .          .     60:			longestWord = len(word)
         .          .     61:		}
         .          .     62:	}
         .          .     63:
         .          .     64:	if dump != "" {
         .          .     65:		g.dumpVertices(dump + "/vertices.txt")
         .          .     66:	}
         .          .     67:
         .       10ms     68:	g.adjList = make([][]int, len(g.vertices))
         .          .     69:	for i := range g.adjList {
         .       10ms     70:		g.adjList[i] = make([]int, 0)
         .          .     71:	}
         .          .     72:
         .          .     73:	stopBldIdxTmr := newTimer("buildIndex")
         .      130ms     74:	index := newIndex(8*1024*1024, longestWord)
         .          .     75:	for i, w := range g.vertices {
         .      460ms     76:		index.add(i, w.word)
         .          .     77:	}
         .          .     78:	stopBldIdxTmr()
         .          .     79:
         .          .     80:	if stats {
         .          .     81:		indexDuplicates(index)
         .          .     82:	}
         .          .     83:
         .          .     84:	// for each word, find words which are only one letter different
         .          .     85:	// and create edges connecting them.
         .          .     86:	stopBldAdjTmr := newTimer("buildAdjList")
         .      2.57s     87:	g.buildAdjList(index)
         .          .     88:	stopBldAdjTmr()
         .          .     89:
         .          .     90:	if dump != "" {
         .          .     91:		g.dumpAdjList(dump + "/adj.txt")
         .          .     92:	}
ROUTINE ======================== main.distance in /Users/erichgess/go/src/erichgess/wordladder/graph.go
     190ms      190ms (flat, cum)  2.87% of Total
         .          .    280:	return g.adjList[v]
         .          .    281:}
         .          .    282:
         .          .    283:func distance(w1, w2 []byte) int {
         .          .    284:	dist := len(w1) - len(w2)
      10ms       10ms    285:	if dist < 0 {
         .          .    286:		dist = -dist
         .          .    287:	}
         .          .    288:	l := len(w1)
      10ms       10ms    289:	if l > len(w2) {
         .          .    290:		l = len(w2)
         .          .    291:	}
      10ms       10ms    292:	for i := 0; i < l; i++ {
      20ms       20ms    293:		if w1[i] != w2[i] {
     130ms      130ms    294:			dist++
         .          .    295:		}
         .          .    296:	}
         .          .    297:
      10ms       10ms    298:	return dist
         .          .    299:}
         .          .    300:
         .          .    301:// WordCount returns hte number of words in the graph
         .          .    302:func (g *Graph) WordCount() int {
         .          .    303:	return len(g.vertices)
ROUTINE ======================== main.main in /Users/erichgess/go/src/erichgess/wordladder/main.go
         0      3.33s (flat, cum) 50.38% of Total
         .          .     47:	if *dump != "" {
         .          .     48:		createPathIfNotExists(*dump)
         .          .     49:	}
         .          .     50:
         .          .     51:	fmt.Println("Loading Dictionary")
         .      3.32s     52:	g := LoadDictionary(*dict, *perfStats, *dump)
         .          .     53:	fmt.Printf("Words: %d\tEdges: %d\n", g.WordCount(), g.EdgeCount())
         .          .     54:
         .          .     55:	if *dictStats {
         .          .     56:		dictionaryStats(*dict)
         .          .     57:	}
         .          .     58:
         .          .     59:	if *src != "" && *dest != "" {
         .          .     60:		fmt.Printf("Finding Path from %s to %s\n", *src, *dest)
         .          .     61:		v1 := g.Find(*src)
         .          .     62:		v2 := g.Find(*dest)
         .          .     63:
         .          .     64:		if v1 < 0 || v2 < 0 {
         .          .     65:			if v1 < 0 {
         .          .     66:				fmt.Printf("%s was not found\n", *src)
         .          .     67:			}
         .          .     68:			if v2 < 0 {
         .          .     69:				fmt.Printf("%s was not found\n", *dest)
         .          .     70:			}
         .          .     71:			return
         .          .     72:		}
         .          .     73:
         .          .     74:		fmt.Println("Using Paths")
         .          .     75:		paths := g.AllPaths(v1)
         .          .     76:		p := paths.To(*dest)
         .          .     77:		if len(p) == 0 {
         .          .     78:			fmt.Printf("There is no path from %s to %s\n", *src, *dest)
         .          .     79:		}
         .          .     80:		for _, v := range p {
         .          .     81:			fmt.Println(string(g.vertices[v].word))
         .          .     82:		}
         .          .     83:	} else if *printGraph {
         .          .     84:		g.PrintAdjList()
         .          .     85:	}
         .          .     86:
         .          .     87:	if *memprofile != "" {
         .       10ms     88:		runtime.GC()
         .          .     89:		memProfile, err := os.Create(*memprofile)
         .          .     90:		if err != nil {
         .          .     91:			log.Fatal("failed to create mem profile file", err)
         .          .     92:		}
         .          .     93:		defer memProfile.Close()
ROUTINE ======================== main.newIndex in /Users/erichgess/go/src/erichgess/wordladder/index.go
      80ms      130ms (flat, cum)  1.97% of Total
         .          .     12:	buf    []byte // a shared buffer used for copying intermediate words
         .          .     13:	size   uint64
         .          .     14:}
         .          .     15:
         .          .     16:func newIndex(size int, bufSize int) *index {
         .       20ms     17:	idx := make([][]int, size)
         .          .     18:	for i := range idx {
      80ms      110ms     19:		idx[i] = make([]int, 0)
         .          .     20:	}
         .          .     21:	return &index{
         .          .     22:		hasher: murmur3.New64(),
         .          .     23:		buf:    make([]byte, 0, bufSize),
         .          .     24:		index:  idx,
ROUTINE ======================== main.skipOneCopy in /Users/erichgess/go/src/erichgess/wordladder/index.go
      10ms       30ms (flat, cum)  0.45% of Total
         .          .     82:// skipOneCopy copies the src slice to the dst slice while skipping
         .          .     83:// the byte at index `skip`.  `dst` should have a length >= `len(src)-1`.
         .          .     84:func skipOneCopy(dst []byte, src []byte, skip int) {
         .          .     85:	tmpA := dst[:skip]
         .          .     86:	tmpB := dst[skip:]
         .       10ms     87:	copy(tmpA, src[:skip])
      10ms       20ms     88:	copy(tmpB, src[skip+1:])
         .          .     89:}
ROUTINE ======================== runtime.main in /usr/local/Cellar/go/1.13.3/libexec/src/runtime/proc.go
         0      3.33s (flat, cum) 50.38% of Total
         .          .    198:		// A program compiled with -buildmode=c-archive or c-shared
         .          .    199:		// has a main, but it is not executed.
         .          .    200:		return
         .          .    201:	}
         .          .    202:	fn := main_main // make an indirect call, as the linker doesn't know the address of the main package when laying down the runtime
         .      3.33s    203:	fn()
         .          .    204:	if raceenabled {
         .          .    205:		racefini()
         .          .    206:	}
         .          .    207:
         .          .    208:	// Make racy client program work: if panicking on
